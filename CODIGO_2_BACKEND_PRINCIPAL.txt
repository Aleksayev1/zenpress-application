======================================
ARQUIVO 3: server.py (Backend Principal)
======================================

from fastapi import FastAPI, APIRouter, HTTPException, Depends, status
from fastapi.security import HTTPAuthorizationCredentials
from dotenv import load_dotenv
from starlette.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient
import os
import logging
from pathlib import Path
from typing import List, Optional
from datetime import datetime, timedelta

# Load environment variables
load_dotenv()

# Import models and auth
from models import User, Technique, Favorite
from auth import get_current_user, get_password_hash, authenticate_user, create_access_token
from payments import payments_router
from models import *
from auth import (
    get_password_hash, 
    authenticate_user, 
    create_access_token, 
    get_current_user,
    get_current_user_optional,
    get_premium_user
)

# Import payments router  
from payment_models import *
from payments import payments_router

# Import crypto payments router
from crypto_payments import crypto_router

# Import reviews analytics router
from reviews_analytics import reviews_router
from spotify_auth import router as spotify_router

# MongoDB connection
mongo_url = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
db_name = os.environ.get('DB_NAME', 'test_database')
client = AsyncIOMotorClient(mongo_url)
db = client[db_name]

# Create the main app without a prefix
app = FastAPI(title="ZenPress API", version="1.0.0")

# Create a router with the /api prefix
api_router = APIRouter(prefix="/api")

# Authentication endpoints
@api_router.post("/auth/register", response_model=Token)
async def register(user_data: UserCreate):
    # Check if user already exists
    existing_user = await db.users.find_one({"email": user_data.email})
    if existing_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already registered"
        )
    
    # Create new user
    hashed_password = get_password_hash(user_data.password)
    user = User(
        name=user_data.name,
        email=user_data.email,
        password_hash=hashed_password
    )
    
    await db.users.insert_one(user.dict())
    
    # Create access token
    access_token = create_access_token(data={"sub": user.id})
    
    return Token(
        access_token=access_token,
        user=UserResponse(**user.dict())
    )

@api_router.post("/auth/login", response_model=Token)
async def login(user_data: UserLogin):
    user = await authenticate_user(user_data.email, user_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect email or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    access_token = create_access_token(data={"sub": user["id"]})
    
    return Token(
        access_token=access_token,
        user=UserResponse(**user)
    )

# User endpoints
@api_router.get("/users/me", response_model=UserResponse)
async def get_current_user_info(current_user: UserResponse = Depends(get_current_user)):
    return current_user

# Technique endpoints
@api_router.get("/techniques", response_model=List[Technique])
async def get_techniques(
    category: Optional[str] = None, 
    current_user: Optional[UserResponse] = Depends(get_current_user_optional)
):
    query = {}
    if category:
        query["category"] = category
    
    # If user is not logged in or not premium, only show non-premium content
    if not current_user or not current_user.is_premium:
        query["is_premium"] = False
    
    techniques = await db.techniques.find(query).to_list(100)
    return [Technique(**technique) for technique in techniques]

@api_router.get("/techniques/{technique_id}", response_model=Technique)
async def get_technique(technique_id: str, current_user: Optional[UserResponse] = Depends(get_current_user_optional)):
    technique = await db.techniques.find_one({"id": technique_id})
    if not technique:
        raise HTTPException(status_code=404, detail="Technique not found")
    
    # Check premium access
    if technique.get("is_premium", False):
        if not current_user or not current_user.is_premium:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Premium subscription required"
            )
    
    return Technique(**technique)

# Session endpoints
@api_router.post("/sessions", response_model=Session)
async def create_session(
    session_data: SessionCreate, 
    current_user: UserResponse = Depends(get_current_user)
):
    # Get technique info
    technique = await db.techniques.find_one({"id": session_data.technique_id})
    if not technique:
        raise HTTPException(status_code=404, detail="Technique not found")
    
    session = Session(
        user_id=current_user.id,
        technique_id=session_data.technique_id,
        technique_name=technique["name"],
        complaint=session_data.complaint,
        duration=session_data.duration,
        rating=session_data.rating
    )
    
    await db.sessions.insert_one(session.dict())
    return session

# Include the router in the main app
app.include_router(api_router)
app.include_router(payments_router)
app.include_router(crypto_router, prefix="/api")
app.include_router(reviews_router, prefix="/api")
app.include_router(spotify_router, prefix="/api")

app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@app.on_event("shutdown")
async def shutdown_db_client():
    client.close()

======================================
ARQUIVO 4: requirements.txt (Backend)
======================================

fastapi==0.110.1
uvicorn==0.25.0
boto3>=1.34.129
requests-oauthlib>=2.0.0
cryptography>=42.0.8
python-dotenv>=1.0.1
pymongo==4.5.0
pydantic>=2.6.4
email-validator>=2.2.0
pyjwt>=2.10.1
passlib>=1.7.4
tzdata>=2024.2
motor==3.3.1
pytest>=8.0.0
black>=24.1.1
isort>=5.13.2
flake8>=7.0.0
mypy>=1.8.0
python-jose>=3.3.0
requests>=2.31.0
pandas>=2.2.0
numpy>=1.26.0
python-multipart>=0.0.9
jq>=1.6.0
typer>=0.9.0
qrcode>=7.4.2
pillow>=10.0.0
spotipy==2.23.0